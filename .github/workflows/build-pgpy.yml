name: Build PGPy Lambda Package (PRIMARY)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  AWS_REGION: 'ap-southeast-2'
  LAMBDA_RUNTIME: 'python3.12'
  LAMBDA_ARCHITECTURE: 'x86_64'

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-pgpy.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zip
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-pgpy.txt
        pip install black isort==7.0.0 mypy
        
    - name: Format check with black
      run: |
        black --check pgp_alternatives/lambda_pgp_decrypt_pgpy.py
        
    - name: Import sorting check with isort
      run: |
        isort --profile black --line-length 127 --check-only pgp_alternatives/lambda_pgp_decrypt_pgpy.py
        
    - name: Type check with mypy
      run: |
        mypy pgp_alternatives/lambda_pgp_decrypt_pgpy.py --ignore-missing-imports

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: |
        bandit -r pgp_alternatives/lambda_pgp_decrypt_pgpy.py -f json -o bandit-report.json || true
        
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-pgpy
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: Build PGPy Lambda Package
    runs-on: ubuntu-latest
    needs: [lint, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y zip
        
    - name: Install Python dependencies (optimized for layer)
      run: |
        python -m pip install --upgrade pip
        # Install only essential dependencies - pgpy will be provided by Lambda layer
        pip install --no-cache-dir --no-deps -r requirements-pgpy.txt -t ./package
        # Install only AWS SDK dependencies (pgpy comes from layer)
        pip install --no-cache-dir boto3 botocore -t ./package
        
    - name: Create deployment package (optimized)
      run: |
        cp pgp_alternatives/lambda_pgp_decrypt_pgpy.py ./package/
        cd package
        # Remove unnecessary files to reduce size
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -name "*.dist-info" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -name "tests" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -name "*.egg-info" -type d -exec rm -rf {} + 2>/dev/null || true
        # Create optimized zip with compression
        zip -r -9 ../lambda-pgpy-deployment-package.zip . -x "*.pyc" "__pycache__/*" "*/tests/*" "*.dist-info/*" "*.egg-info/*"
        
    - name: Check package size
      run: |
        cd ..
        PACKAGE_SIZE=$(du -h lambda-pgpy-deployment-package.zip | cut -f1)
        PACKAGE_SIZE_MB=$(du -m lambda-pgpy-deployment-package.zip | cut -f1)
        echo "üì¶ Package size: $PACKAGE_SIZE ($PACKAGE_SIZE_MB MB)"
        if [ $PACKAGE_SIZE_MB -gt 50 ]; then
          echo "‚ö†Ô∏è  WARNING: Package size ($PACKAGE_SIZE_MB MB) exceeds 50MB limit"
          echo "üí° Consider using Lambda layers for large dependencies"
        else
          echo "‚úÖ Package size is within 50MB limit"
        fi
        
    - name: Create package info
      run: |
        echo "Package Information:" > package-info-pgpy.txt
        echo "Runtime: ${{ env.LAMBDA_RUNTIME }}" >> package-info-pgpy.txt
        echo "Architecture: ${{ env.LAMBDA_ARCHITECTURE }}" >> package-info-pgpy.txt
        echo "Python Version: ${{ env.PYTHON_VERSION }}" >> package-info-pgpy.txt
        echo "Note: Using Python 3.12 due to pgpy compatibility with imghdr module" >> package-info-pgpy.txt
        echo "Build Date: $(date -u)" >> package-info-pgpy.txt
        echo "Git Commit: ${{ github.sha }}" >> package-info-pgpy.txt
        echo "Git Ref: ${{ github.ref }}" >> package-info-pgpy.txt
        echo "Implementation: PGPy" >> package-info-pgpy.txt
        echo "Dependencies: AWS SDK only (PGPy from Lambda layer)" >> package-info-pgpy.txt
        echo "Required Layer: new-gpg-layer" >> package-info-pgpy.txt
        echo "" >> package-info-pgpy.txt
        echo "Deployment Instructions:" >> package-info-pgpy.txt
        echo "1. Upload lambda-pgpy-deployment-package.zip to Lambda function" >> package-info-pgpy.txt
        echo "2. Attach layer 'new-gpg-layer' to the Lambda function" >> package-info-pgpy.txt
        echo "3. Set runtime to python3.12" >> package-info-pgpy.txt
        echo "4. Set architecture to x86_64" >> package-info-pgpy.txt
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lambda-pgpy-deployment-package-${{ github.sha }}
        path: |
          lambda-pgpy-deployment-package.zip
          package-info-pgpy.txt
        retention-days: 30
        
    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      if: github.ref == 'refs/heads/main'
      with:
        name: lambda-pgpy-deployment-package-latest
        path: |
          lambda-pgpy-deployment-package.zip
          package-info-pgpy.txt
        retention-days: 90

  notify:
    name: Build Status Notification
    runs-on: ubuntu-latest
    needs: [lint, security, build]
    if: always()
    
    steps:
    - name: Notify on Success
      if: needs.build.result == 'success'
      run: |
        echo "‚úÖ PGPy Lambda package built successfully!"
        echo "üì¶ Package artifacts are available for download from GitHub Actions"
        echo "üîó Check the Actions tab to download the lambda-pgpy-deployment-package.zip"
        
    - name: Notify on Failure
      if: needs.build.result == 'failure'
      run: |
        echo "‚ùå Build failed!"
        exit 1
